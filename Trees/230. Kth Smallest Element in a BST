/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    int result;
    int count = 0;
    
    public int kthSmallest(TreeNode root, int k) {
        
        //return kthSmallestIterativeHelper(root,k);
        
        kSmallestHelper(root,k);
        return result;
    }
    
    //Iterative Inorder Traversal
    public int kthSmallestIterativeHelper(TreeNode root, int k){
        Stack<TreeNode> stk = new Stack<>();
        while(root!=null || !stk.isEmpty()){
            while(root!=null){
                stk.add(root);
                root = root.left;
            }
            root = stk.pop();
            if(--k == 0) return root.val;
            root = root.right;
        }
        return root.val;
    }
    
    //Recursive Inorder Traversal
    public void kSmallestHelper(TreeNode root, int k)
    {
        if(root == null)
            return;
        
        kSmallestHelper(root.left,k);
        if(++count == k){
            result = root.val;
            return;
        }
        kSmallestHelper(root.right,k);
    }
}
