class Solution {
    public int evalRPN(String[] tokens) {
        
        String operands = "+-*/";
        Stack<String> operandStack = new Stack<>();
        
        for(String symbol: tokens){
            
            if(operands.contains(symbol)){
                Integer opr2 = Integer.parseInt(operandStack.pop());
                Integer opr1 = Integer.parseInt(operandStack.pop());
                Integer result = new Integer(0);
                    
                if(symbol.equals("+"))
                    result = opr1 + opr2;
                else if(symbol.equals("*"))
                    result = opr1 * opr2;
                else if(symbol.equals("-"))
                    result = opr1 - opr2;
                else if(symbol.equals("/"))
                    result = opr1 / opr2;
                
                operandStack.push(String.valueOf(result));
                continue;
            }
            
            operandStack.push(symbol);
        }
        return Integer.parseInt(operandStack.pop());
    }
}


/*
public int evalRPN(String[] tokens) {
 int[] ls = new int[tokens.length/2+1];
    int index = 0;
    for (String token : tokens) {
        switch (token) {
            case "+":
                ls[index - 2] = ls[index - 2] + ls[index - 1];
                index--;
                break;
            case "-":
                ls[index - 2] = ls[index - 2] - ls[index - 1];
                index--;
                break;
            case "*":
                ls[index - 2] = ls[index - 2] * ls[index - 1];
                index--;
                break;
            case "/":
                ls[index - 2] = ls[index - 2] / ls[index - 1];
                index--;
                break;
            default:
                ls[index++] = Integer.parseInt(token);
                break;
        }
    }
    return ls[0];
}
*/
