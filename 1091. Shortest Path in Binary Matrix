class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        
        int N = grid.length;
        if(grid == null || grid.length == 0 || grid[0][0] == 1 || grid[N-1][N-1] == 1)
            return -1;
        
        //This array is used for calculating the 8 directions around a graph vertex
        int dirs[][] = new int[][]{{0,1},{0,-1},{1,0},{-1,0},{1,-1},{-1,1},{-1,-1},{1,1}};
        
        Queue<int[]> queue = new LinkedList<>();
        boolean visited[][] = new boolean[N][N];
        
        queue.add(new int[]{0,0});
        visited[0][0] = true;
        int steps = 0;
        
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size;i++){
            int c[] = queue.poll();
            
            if(c[0] == N-1 && c[1] == N-1)
                    return steps+1;
            
            for(int dir[]: dirs){
                int newX = c[0] + dir[0];
                int newY = c[1] + dir[1];
                
                if(newX >= 0 & newY >= 0 && newX < N && newY < N    //checks if new x & y are out of bounds
                   //checks if we haven't seen a blocked vertex && a vertex is not visited before
                   && grid[newX][newY] != 1 && !visited[newX][newY]){
                    //adds a vertex to the queue
                    queue.add(new int[]{newX,newY});
                    //marks a vertex as visited
                    visited[newX][newY] = true;
                }
            }
            }
            //Incrementing the steps after every level of bfs
            steps++;
        }
        //if we traverse the entire graph and 
        //don't reach the last square on the grid because of blocked vertices
        return -1;
    }
}

