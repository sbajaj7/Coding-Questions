/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        
        if(root == null)
            return 0;
        
        Deque<TreeNode> dq = new LinkedList<>(); // initialize deque
        dq.add(root);
        
        int max = 1;
        
        while(!dq.isEmpty()){
            
            int count = dq.size();
            //System.out.println(count);
            max = Math.max(count,max);
            
            for(int i = 0;i<count;i++){
                TreeNode node = dq.poll();
                
                if (node == null) { // node was null then to maintain add both left and right as null
                    dq.add(null);
                    dq.add(null);
                } else {
                    dq.add(node.left);
                    dq.add(node.right);
                }
            }
            
            while(!dq.isEmpty() && dq.peekFirst() == null){
                dq.poll();
            }
            
            while(!dq.isEmpty() && dq.peekLast() == null){
                dq.pollLast();
            }
        }
        return max;
    }
}
