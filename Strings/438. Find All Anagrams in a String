class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        
        if(s == null || p == null || s.isEmpty() || p.isEmpty())
            return new ArrayList();
        
        List<Integer> result = new ArrayList<>();
                
        int[] hash = new int[256]; //character hash
        //record each character in p to hash
        for (char c : p.toCharArray()) {
            hash[c]++;
        }
        
        //two pointers, initialize count to p's length
        int start = 0, end = 0, count = p.length();
        
        while (end < s.length()) {
        //move right everytime, if the character exists in p's hash, decrease the count
        //current hash value >= 1 means the character is existing in p
        if (hash[s.charAt(end++)]-- >= 1) 
            count--; 
        
        //when the count is down to 0, means we found the right anagram
        //then add window's left to result list
        if (count == 0) 
            result.add(start);
    
        //if we find the window's size equals to p, then we have to move left (narrow the window) to find the new match window
        //++ to reset the hash because we kicked out the left
        //only increase the count if the character is in p
        //the count >= 0 indicate it was original in the hash, cuz it won't go below 0
        if (end - start == p.length() && hash[s.charAt(start++)]++ >= 0) 
            count++;
    }
        
        return result;
    }
}
