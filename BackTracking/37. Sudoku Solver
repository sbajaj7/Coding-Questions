class Solution {
    public void solveSudoku(char[][] board) {
        
        if(board == null)
            return;
        
        solveBoard(board);
    }
    
    public boolean solveBoard(char[][] board){
        
        for(int i = 0;i<board.length;i++){
            for(int j = 0;j<board[0].length;j++){
                
                if(board[i][j] != '.') continue;
                
                    for(char c = '1'; c<='9';c++){
                        
                        if(isValidMove(board,i,j,c)){
                            board[i][j] = c;
                        
                        if(solveBoard(board))
                            return true;
                            
                        board[i][j] = '.';
                    }
                }
                return false;
            }
        }
        return true;
    }
    
    public boolean isValidMove(char[][] board, int x, int y, char c){
        
        for(int i = 0;i<board.length;i++){
                
                if(board[x][i] != '.' && board[x][i] == c)
                    return false;
                if(board[i][y] != '.' && board[i][y] == c)
                    return false;
                
                int rowIndex = 3*(x/3);
                int colIndex = 3*(y/3);
                
                //System.out.println(rowIndex + " " + colIndex);
                //System.out.println((3*(x/3) + i/3) +" " + (3*(y/3) + i%3));
                //System.out.println("Checking block for" + c);
                if(board[rowIndex + i/3][colIndex + i%3] != '.' && board[rowIndex + i/3][colIndex + i%3] == c)
                    return false;

        }
        return true;
    }
}
