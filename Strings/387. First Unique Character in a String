class Solution {
    public int firstUniqChar(String s) {
        //The runtime of this is 54% and space is 99% better than other solutions.
        //We are using a linkedhashmap here because it preserves the elements in order of insertion
        /*Map<Character,Integer> freqMap = new LinkedHashMap<>();
        
        for(Character c: s.toCharArray()){
            freqMap.put(c,freqMap.getOrDefault(c,0)+1);
        }
        
        for(Map.Entry<Character,Integer> entry: freqMap.entrySet()){
           if(entry.getValue() == 1){
               char res = entry.getKey();
               return s.indexOf(res);
           }
        }*/
        
        //The runtime of this is 81% and space is 99.29% better than other solutions.
        int freqArr[] = new int[26];
        for(Character c: s.toCharArray())
            freqArr[c-'a']++;
        for(int i=0;i<s.length();i++){
            if(freqArr[s.charAt(i) - 'a'] == 1)
                return i;
        }
        return -1;
    }
}
