class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        
        /* M-1 Brute Force
        for(int i = 0;i<nums.length;i++){
            for(int j = i+1;j<nums.length && j<=i+k;j++){
                System.out.println(Math.abs(nums[i]-nums[j]));
                if(Math.abs(1L * nums[i] - nums[j]) <= t)
                    return true;
            }
        }*/
        
        if (nums.length == 0 || k <= 0) 
            return false;
        
        TreeSet<Long> set = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            Long floor = set.floor(1L * nums[i] + t);
            Long ceil = set.ceiling(1L * nums[i] - t);
            if ((floor != null && floor >= nums[i]) || (ceil != null && ceil <= nums[i]))
                return true;

            set.add(1L * nums[i]);
            if (i >= k)
                set.remove(1L * nums[i - k]);
        }
        
        return false;
    }
}
