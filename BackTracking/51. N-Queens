class Solution {
    public List<List<String>> solveNQueens(int n) {
        char board[][] = new char[n][n];
        
        for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                board[i][j] = '.';
        List<List<String>> res = new ArrayList<>();
        
        Solution sol = new Solution();
        sol.NQueens(board,0,res);
        //printBoard(board);
        return res;
    }
    public static boolean isSafe(char board[][],int row,int col){
        int i,j;
        for(i = col;i>=0;i--){
            if(board[row][i] == 'Q')
                return false;
        }
        for(i = row, j = col;i>=0 && j>=0;i--,j--){
            if(board[i][j] == 'Q')
                return false;
        }
        for(i = row, j = col;i<board.length && j>=0;i++,j--){
            if(board[i][j] == 'Q')
                return false;
        }
        return true;
    }
    public void NQueens(char board[][],int col, List<List<String>> res){
        
        if(col == board[0].length){
            res.add(construct(board));
            return;
        }
        
        for(int row = 0;row<board.length;row++){
            
            if(isSafe(board,row,col)){
                board[row][col] = 'Q';
                NQueens(board,col+1,res);
                board[row][col] = '.';
            }
        }
    }
    public static List<String> construct(char[][] board) {
        List<String> res = new ArrayList<>();
        for(int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
    public void printBoard(char[][] board){
        for(char row[]: board){
            for(char i: row){
            System.out.print(i + " ");
        }
        System.out.println();
    }
    }
}
