class Solution {
    public List<String> findItinerary(List<List<String>> tickets) {        
        Map<String, PriorityQueue<String>> ticketMap = new HashMap<>();
        List<String> itinerary = new LinkedList<String>();
        
        // add individual flight routes to map
        for (List<String> ticket : tickets) 
            ticketMap.computeIfAbsent(ticket.get(0), k -> new PriorityQueue<String>()).add(ticket.get(1));

        // push tickets to stack
        Stack<String> ticketStk = new Stack<>();
        ticketStk.push("JFK");
        
        // compare stack and map to find departure and arrival airports
        while(!ticketStk.isEmpty()){
            String source = ticketStk.peek();
            
            if(ticketMap.containsKey(source) && !ticketMap.get(source).isEmpty())
                ticketStk.push(ticketMap.get(source).poll());
            else
                itinerary.add(0, ticketStk.pop());

        }
        
        return itinerary;
    }
}
