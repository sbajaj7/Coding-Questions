/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int dep1 = 0;
    int dep2 = 0;
    TreeNode parent1 = null;
    TreeNode parent2 = null;
    public boolean isCousins(TreeNode root,int x, int y) {
        if(x == y)
            return false;
        
        /*cousinsDFSHelper(root,0, x, y,null);
        
        if(dep1 == dep2 && parent1 != parent2)
            return true;
        
        return false;*/
        
        return cousinsBFSHelper(root,x,y);
    }
    
    public void cousinsDFSHelper(TreeNode node, int depth, int x, int y, TreeNode parent){
        if(node == null)
            return;
        
        if(node.val == x){
            parent1 = parent;
            dep1 = depth;
            return;
        }else if(node.val == y){
            parent2 = parent;
            dep2 = depth;
            return;
        }     
        
        cousinsDFSHelper(node.left,depth+1,x,y, node);
        
        cousinsDFSHelper(node.right,depth+1,x,y, node);
    }
    
    public boolean cousinsBFSHelper(TreeNode root,int A, int B){
        
    if (root == null) return false;
	Queue<TreeNode> queue = new LinkedList<>();
	queue.offer(root);
        
	while (!queue.isEmpty()) {
        
		int size = queue.size();
        
		boolean isAexist = false;		
		boolean isBexist = false;		
        
		for (int i = 0; i < size; i++) {
            
			TreeNode cur = queue.poll();
            if (cur.val == A) isAexist = true;
            if (cur.val == B) isBexist = true;
			if (cur.left != null && cur.right != null) { 
				if (cur.left.val == A && cur.right.val == B) { 
					return false;
				}
				if (cur.left.val == B && cur.right.val == A) { 
					return false;
				}
			}
			if (cur.left != null) {
				queue.offer(cur.left);
			}
			if (cur.right != null) {
				queue.offer(cur.right);
			}
		}
		
        if (isAexist && isBexist)  return true;
	}
	return false;
}
}
