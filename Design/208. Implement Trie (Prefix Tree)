class Trie {

    /** Initialize your data structure here. */
    TrieNode root;
    
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        
        TrieNode curNode = root;
        for(int i = 0;i<word.length();i++){
            char c =  word.charAt(i);
            TrieNode nextNode = curNode.childNodes[c-'a'];
            if(nextNode == null){
                nextNode = new TrieNode();
                curNode.childNodes[c-'a'] = nextNode;
            }
            curNode = nextNode;
        }
        curNode.isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        
        TrieNode curNode = root;
        for(int i = 0;i<word.length();i++){
            char c =  word.charAt(i);
            TrieNode nextNode = curNode.childNodes[c-'a'];
            if(nextNode == null)
                return false;
            
            curNode = nextNode;
        }
        return curNode.isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        
        TrieNode curNode = root;
        for(int i = 0;i<prefix.length();i++){
            char c =  prefix.charAt(i);
            TrieNode nextNode = curNode.childNodes[c-'a'];
            if(nextNode == null)
                return false;
            
            curNode = nextNode;
        }
        return true;
    }
}

class TrieNode{
    boolean isEnd;
    TrieNode childNodes[];
    
    public TrieNode(){
        isEnd = false;
        childNodes = new TrieNode[26];
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
